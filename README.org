#!/usr/bin/env mdsh

# TODO: Implement saku as well

#+property: header-args -n -r -l "[{(<%s>)}]" :tangle-mode (identity 0444) :noweb yes :mkdirp yes

# Adapted From:
# Answer: https://stackoverflow.com/a/65232183/10827766
# User: https://stackoverflow.com/users/776405/whil
#+startup: show3levels

#+begin_quote
Like Chemacs, but worse! — John Oliver (... Yeah, no; I wish! Maybe some day!)
#+end_quote

* হ্যালো! Hello!

This is the beginning of my version of a literate configuration for
[[https://www.gnu.org/software/emacs/][GNU Emacs]].

They were inspired primarily by the configurations of
[[https://alhassy.github.io/emacs.d/index.html][Musa Al-hassy]]
and [[https://github.com/patrickt/emacs][Patrick Thomson]].

* Wheee!

First of all, I don't know how to check if I'm running on my phone, so I pass in a command-line argument:

#+begin_src emacs-lisp
(defvar meq/var/phone (member "-p" command-line-args))
(delete "-p" command-line-args)
#+end_src

--------------

Then I'll remove the double dashes from scripts:

#+begin_src emacs-lisp
(when (string= (car (last command-line-args)) "--") (delete "--" command-line-args))
#+end_src

--------------

These next few lines are unabashedly stolen from
[[https://github.com/hlissner][Henrik Lissner's]]
[[https://github.com/hlissner/doom-emacs/blob/develop/early-init.el][Doom Emacs' ~early-init.el~]]:

#+begin_quote
Emacs 27.1 introduced early-init.el, which is run before init.el, before
package and UI initialization happens, and before site files are loaded.
#+end_quote

#+begin_quote
A big contributor to startup times is garbage collection. We up the gc
threshold to temporarily prevent it from running, then reset it later by
enabling `gcmh-mode'. Not resetting it will cause stuttering/freezes.
#+end_quote

#+begin_src emacs-lisp
(setq gc-cons-threshold most-positive-fixnum)
#+end_src

And for the ~file-name-handler-alist~:

#+begin_src emacs-lisp
(unless (or (daemonp) noninteractive)
  (let ((old-file-name-handler-alist file-name-handler-alist))
#+end_src

#+begin_quote
`file-name-handler-alist' is consulted on each `require', `load' and
various path/io functions. You get a minor speed up by unsetting this.
Some warning, however: this could cause problems on builds of Emacs where
its site lisp files aren't byte-compiled and we're forced to load the
*.el.gz files (e.g. on Alpine).
#+end_quote

#+begin_src emacs-lisp
    (setq-default file-name-handler-alist nil)
#+end_src

#+begin_quote
...but restore `file-name-handler-alist' later, because it is needed for
handling encrypted or compressed files, among other things.
#+end_quote

#+begin_src emacs-lisp
    (defun meq/reset-file-handler-alist-h ()
      (setq file-name-handler-alist
#+end_src

#+begin_quote
Merge instead of overwrite because there may have bene changes to
`file-name-handler-alist' since startup we want to preserve.
#+end_quote

#+begin_src emacs-lisp
            (delete-dups (append file-name-handler-alist
                                 old-file-name-handler-alist))))
    (add-hook 'emacs-startup-hook #'meq/reset-file-handler-alist-h 101)))
#+end_src

--------------

I would like to always prefer newer byte-compiled files, therefore, I use
[[https://emacs.stackexchange.com/a/186/31428][this answer]], by
[[https://emacs.stackexchange.com/users/50/malabarba][Malabarba]]:

#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src

--------------

If I ever need it, this will give me the initial directory I was in; the code is adapted from
[[https://emacs.stackexchange.com/users/1979/stefan][Stefan's]]
[[https://emacs.stackexchange.com/a/31662/31428][answer here]]:

#+begin_src emacs-lisp
(setq meq/var/initial-directory default-directory)
#+end_src

--------------

The next few bits are adapted from
[[https://www.reddit.com/r/emacs/comments/dppmqj/do_i_even_need_to_leverage_earlyinitel_if_i_have/?utm_source=amp&utm_medium=&utm_content=post_body][here]],
with a few quotes from myself and other scattered here and there, such as this bit
[[https://www.reddit.com/r/emacs/comments/41m7x3/why_are_you_changing_gcconsthreshold/cz3t775?utm_source=share&utm_medium=web2x&context=3][about ~gc-cons-percentage~]]:

#+begin_quote
... There's also gc-cons-percentage which performs a gc if the amount of new memory used as a percentage
of the total has increased by a certain amount.
If you set gc-cons-threshold to a large number that effectively puts gc-cons-percentage into the driving seat.
The default gc-cons-threshold is 400000 bytes, not 800000. ...
#+end_quote

#+begin_src emacs-lisp
(defvar meq/var/gc-cons-percentage gc-cons-percentage)

(add-hook 'after-init-hook
          (lambda ()
            (setq gc-cons-percentage meq/var/gc-cons-percentage)

            (defun meq/gc-on-lose-focus ()
              (unless (frame-focus-state)
                (garbage-collect)))

            (if (boundp 'after-focus-change-function)
                (add-function :after after-focus-change-function #'meq/gc-on-lose-focus))))

(setq-default gc-cons-percentage 0.6
#+end_src

Dunno /quite/ what this bit does...

#+begin_src emacs-lisp
              auto-window-vscroll nil
              frame-inhibit-implied-resize t
              inhibit-compacting-font-caches t)
#+end_src

I don't like typing ~yes~ or ~no~ all the time, so we'll shorten the answer statement a bit.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Dunno what /this/ bit does either...

#+begin_src emacs-lisp
(fset 'view-hello-file 'ignore)
(fset 'display-startup-echo-area-message 'ignore)

(put 'narrow-to-region 'disabled nil)
(put 'up-case-rgion 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'erase-buffer 'disabled nil)

(push '(ns-transparent-titlebar . t) default-frame-alist)
(push '(ns-appearance . nil) default-frame-alist)
(push '(internal-border . 0) default-frame-alist)
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars . 0) default-frame-alist)
(push '(left-fringe . 0) default-frame-alist)
(push '(right-fringe . 0) default-frame-alist)
#+end_src

--------------

Now that that's over with, let's get the profile name; this is done by searching through the ~command-line-args~
list for the ~--profile~ argument. If found, get the profile name from the index of the ~--profile~ argument
plus 1, otherwise, set it to the default name of ~damascus~.

#+begin_src emacs-lisp
(defvar meq/var/profiled t)
(defvar meq/var/profile-name (if (member "--profile" command-line-args)
    (let* ((value (nth (1+ (seq-position command-line-args "--profile")) command-line-args)))
        (unwind-protect
            value
#+end_src

While we're at it, we'll delete the the appropriate command-line arguments as well:

#+begin_src emacs-lisp
            (delete "--profile" command-line-args)
            (delete value command-line-args))) "damascus"))
#+end_src

--------------

This next bit defines a function which will add arguments to the ~command-line-args~ list, if and only if it
doesn't already exist in the list and the argument is an option, as when prefixed by ~-~ or ~--~.

#+begin_src emacs-lisp
(require 'cl)
(defun meq/push-to-cla (args)
    (dolist (arg* args)
        (let* ((arg (if (stringp arg*) arg* (symbol-name arg*)))
                (already-in-list (member arg command-line-args)))
            (when (and
                    (or (string-prefix-p "-" arg) (string-prefix-p "--" arg))
                    (not already-in-list)) (add-to-list 'command-line-args arg t)))))
#+end_src

Next, for specific profiles, if applicable, we will add any arguments necessary to be able to run the profile.

#+begin_src emacs-lisp
(cl-case (intern meq/var/profile-name)
    (nano (meq/push-to-cla '(--profile-lib profiles/nano/lisp/nano.el)))
    (graphene (meq/push-to-cla '(--profile-lib profiles/graphene/lisp/graphene.el))))
#+end_src

--------------

Let's byte-compile the library directories and add them to the load-path now;
the following bits are adapted from [[https://emacs.stackexchange.com/users/14825/nickd][NickD's answer]]
[[https://emacs.stackexchange.com/a/55415/31428][here]], and
[[https://www.emacswiki.org/emacs/LoadPath#h5o-2][from this section of the Emacs Wiki]].

The first directory to compile and add is the directory of emacs packages, as git submodules, of my project,
managed by... well... you'll see.

#+begin_src emacs-lisp
(let ((default-directory (concat pre-user-emacs-directory "lib")))
    (byte-recompile-directory default-directory nil)
    (normal-top-level-add-to-load-path '("."))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

The second directory consists of the packages I develop, as git subtrees:

#+begin_src emacs-lisp
(let ((default-directory (concat pre-user-emacs-directory "siluam")))
    (byte-recompile-directory default-directory nil)
    (normal-top-level-add-to-load-path '("."))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

--------------

[[https://github.com/emacscollective/borg][[[file:borg.gif]]]]
https://youtu.be/rQxluLOMcVE?t=33

* Addendum

These are just a few blocks I use regularly in my ~org~ files, whether in ~noweb~, naming, or otherwise:

# Adapted From: https://www.reddit.com/r/emacs/comments/4o9f0e/anyone_have_disabled_parts_of_their_config_being/d4apjey?utm_source=share&utm_medium=web2x&context=3
:PROPERTIES:
:header-args: :tangle no
:END:

** username

#+name: username
#+begin_src text
shadowrylander
#+end_src

** hash-deprecated

#+name: hash-deprecated
#+begin_src emacs-lisp :var name=""
(md5 (concat (replace-regexp-in-string "/" "" (
    org-format-outline-path (org-get-outline-path))) (
        nth 4 (org-heading-components)) name))
#+end_src

** hash

#+name: hash
#+begin_src emacs-lisp
(format-time-string "%Y%m%d%H%M%S%N")
#+end_src